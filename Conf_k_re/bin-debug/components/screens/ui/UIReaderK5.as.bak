package components.screens.ui
{
	import components.abstract.RegExpCollection;
	import components.abstract.functions.loc;
	import components.basement.UI_BaseComponent;
	import components.gui.fields.FSCheckBox;
	import components.gui.fields.FSComboBox;
	import components.gui.fields.FSComboCheckBox;
	import components.gui.fields.FSRadioGroup;
	import components.gui.fields.FSSimple;
	import components.gui.fields.FormString;
	import components.interfaces.IFormString;
	import components.protocol.Package;
	import components.static.CMD;
	
	public class UIReaderK5 extends UI_BaseComponent
	{
		public function UIReaderK5()
		{
			super();
			globalY = 10;
			globalX = 10;
			
			var list:Array = [{label:loc("g_disabled_m").toLowerCase(), data:0},{label:loc("ui_reader"), data:1},{label:loc("ui_reader_external_control"), data:2}];
			createUIElement( new FSComboBox, CMD.READER_TM, loc("ui_reader_tm_output"),
				callLogic,1,list );
			attuneElement( 360,150, FSComboBox.F_COMBOBOX_NOTEDITABLE );
			
			globalY += 10;
			
			createUIElement( new FSComboBox, CMD.READER_TM, loc("ui_reader_ind_tm"), 
				null, 2 );
			attuneElement( 460, 50, FSComboBox.F_COMBOBOX_NOTEDITABLE );
			
			drawSeparator( 510 );
			createUIElement( new FSCheckBox, CMD.READER_TM, loc("ui_reader_allow_guard_with_short_circuit"),
				null,3);
			attuneElement( 410, NaN, FSCheckBox.F_MULTYLINE );
			
			var anchor:int = globalY;
			FLAG_SAVABLE = false;
			createUIElement( new FormString, 0, loc("ui_reader_part_guard_when_circuit"), null, 1 );
			attuneElement( 360, NaN, FormString.F_MULTYLINE );
			globalY = anchor;
			FLAG_SAVABLE = true;
			createUIElement( new FSComboCheckBox, CMD.READER_TM, "", null, 4 );
			attuneElement( 0, 150 );
			getLastElement().x = 370;
			(getLastElement() as FSComboCheckBox).turnToBitfield = turnToPartitionBitfield;
			
			drawSeparator( 510 );

			var rg:FSRadioGroup = new FSRadioGroup( [ {label:loc("ui_reader_rg1"), selected:false, id:0x01 },
				 	{label:loc("ui_reader_rg2"), selected:false, id:0x02 },
				 	{label:loc("ui_reader_rg3"), selected:true, id:0x03 },
					{label:loc("ui_reader_rg4"), selected:true, id:0x04 }], 1 );
			rg.y = globalY;
			rg.x = globalX;
			rg.width = 496;
			addChild( rg )
			globalY += 165;
			addUIElement( rg, CMD.READER_TM,5,callLogic);
			createUIElement( new FSSimple, CMD.READER_TM, loc("ui_reader_time_ext_circuit"),
				null,6, null, "0-9", 5, new RegExp( RegExpCollection.REF_300to10k ));
			attuneElement( 459, 50, FSSimple.F_MULTYLINE );
			
			anchor = globalY;
			FLAG_SAVABLE = false;
			createUIElement( new FormString, 0, loc("ui_reader_part_guard_when_ext_control"), null, 2 );
			attuneElement( 360, NaN, FormString.F_MULTYLINE );
			globalY = anchor;
			FLAG_SAVABLE = true
			createUIElement( new FSComboCheckBox, CMD.READER_TM, "", null, 7 );
			attuneElement( 0, 150 );
			getLastElement().x = 370;
			//(getLastElement() as FSComboCheckBox).turnToBitfield = PartitionServant.turnToPartitionBitfield;
			(getLastElement() as FSComboCheckBox).turnToBitfield = turnToPartitionBitfield;
			
			starterCMD = CMD.READER_TM;
		}
		override public function put(p:Package):void
		{
//			(getField( CMD.READER_TM, 2 ) as FSComboBox).setList( [{label:loc("g_no"), data:0}].concat(PartitionServant.getPartitionList()) );
//			(getField( CMD.READER_TM, 4 ) as FSComboCheckBox).setList( PartitionServant.getPartitionCCBList( p.getStructure()[3] ));
//			(getField( CMD.READER_TM, 7 ) as FSComboCheckBox).setList(  PartitionServant.getPartitionCCBList( p.getStructure()[6] ) );
			(getField( CMD.READER_TM, 2 ) as FSComboBox).setList( [{label:loc("g_no"), data:0}].concat(getPartitionList()) );
			(getField( CMD.READER_TM, 4 ) as FSComboCheckBox).setList( getPartitionCCBList( p.getStructure()[3] ));
			(getField( CMD.READER_TM, 7 ) as FSComboCheckBox).setList( getPartitionCCBList( p.getStructure()[6] ) );

			distribute( p.getStructure(), CMD.READER_TM );
				
			callLogic();
			loadComplete();
		}
		private function callLogic(target:IFormString=null):void
		{
			const OFF:int = 0;
			const INTERNAL:int = 1;
			const EXTERNAL:int = 2;
			var management_s:String = getField( CMD.READER_TM, 1 ).getCellInfo().toString();
			var management:int = int(getField( CMD.READER_TM, 1 ).getCellInfo());
			
			var field:IFormString;
			field = getField( CMD.READER_TM,3);
			field.disabled = management != INTERNAL;
			if (management != INTERNAL)
				field.setCellInfo("0");
			
			field = getField( CMD.READER_TM,4);
			field.disabled = management != INTERNAL;
			if( management != INTERNAL )
				(field as FSComboCheckBox).setList(  getPartitionCCBList( 0 ) );
			getField( 0, 1 ).disabled = management != INTERNAL;
				
			getField( CMD.READER_TM,5).disabled = management != EXTERNAL;
			var selection:int = int(getField( CMD.READER_TM,5).getCellInfo());
			
			var isParam6disabled:Boolean = Boolean( !(selection == 3 || selection == 4) || management != EXTERNAL);
			var param6:IFormString = getField( CMD.READER_TM,6); 
			if (isParam6disabled == true && !param6.isValid( param6.getCellInfo().toString() ) )
				param6.setCellInfo("300");
			param6.disabled = isParam6disabled;
			//getField( CMD.READER_TM,6).disabled = isParam6disabled;
			if (management != EXTERNAL)
				(getField( CMD.READER_TM, 7) as FSComboCheckBox).setList(  getPartitionCCBList( 0 ) );
			getField( CMD.READER_TM, 7 ).disabled = management != EXTERNAL;
			getField( 0, 2 ).disabled = management != EXTERNAL;
			
			if(target)
				remember( target );
		}
		private function getPartitionList():Array 
		{
			var sectionList:Array = new Array;
			var bit:int=0;
			for (var i:int=0; i<16; i++) {
				bit = 0;
				bit |= 1 << i;
				sectionList.push( {label:(i+1), data:bit } );
			}
			return sectionList;
		}
		private function getPartitionCCBList(bit:int):Array
		{
			var list:Array = new Array;
			list.push( {"label":loc("part_all"), "data":0, "trigger": FSComboCheckBox.TRIGGER_SELECT_ALL } );
			var selected:int;
			for (var j:int=0; j<16; j++) {
				var _bit:int = bit;
				selected = 0;
				for( var i:int=0; i<16; ++i ) {
					if ( (_bit & int(1<<i)) > 0 && i == j ) {
						selected = 1;
						break;
					}
				}
				list.push( {"labeldata":(j+1), 
					"label":(j+1), 
					"data":selected, 
					"block":0 } ); // param = partition (45,65,99 etc)
			}
			return list;
		}
		private function turnToPartitionBitfield( arr:Array ):int
		{
			var len:int = arr.length;
			var bf:int;
			for(var i:int=0; i<len; ++i) {
				bf |= 1 << (int(arr[i]) - 1);
			}
			return bf;
		}
		private function getPartitionBySection(bf:int):int
		{
			for (var i:int=0; i<16; i++) {
				if ( 1 << i == bf )
					return i+1;
			}
			return 0;
		}
	}
}