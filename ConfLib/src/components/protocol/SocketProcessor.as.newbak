package components.protocol  
{
	import flash.errors.IOError;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.events.SecurityErrorEvent;
	import flash.events.TimerEvent;
	import flash.net.Socket;
	import flash.profiler.showRedrawRegions;
	import flash.system.Security;
	import flash.utils.ByteArray;
	import flash.utils.Timer;
	
	import components.abstract.ParsingBot;
	import components.abstract.Warning;
	import components.abstract.functions.dtrace;
	import components.abstract.functions.loc;
	import components.events.GUIEventDispatcher;
	import components.events.SystemEvents;
	import components.gui.DevConsole;
	import components.protocol.statics.CLIENT;
	import components.protocol.statics.SERVER;
	import components.protocol.statics.SHA256;
	import components.protocol.workers.PacketInspector;
	import components.static.COLOR;
	import components.static.DEVICES;
	import components.static.MISC;
	import components.system.UTIL;
	
	public class SocketProcessor extends Socket 
	{
		private static var instance:SocketProcessor;

		public var fIsWatingForPacket:Function;
		
		private var request:ByteArray;
		private var answer:ByteArray;
		private var response:ByteArray;
		private var fResponseProcessor:Function;
		private var timerIdleConnection:Timer;
		private var invalidDataCounter:int=0;
		private var incomplete:Boolean;
	//	private var timerIdleConnectionWasRunning:Boolean=false;		// если в момент прихода байт на сокет таймер был в состоянии running надо запоминать это состояние 
			//	и в случае прихода второго протокола запускать его опять, потому что ожидание нужно только для первого протокола
		private var inspector:PacketInspector;
		
		public static function getInstance():SocketProcessor 
		{
			if ( instance == null )
				instance = new SocketProcessor();
			return instance;
		}
		
		public function SocketProcessor() 
		{
			super();
			configureListeners();
			
			inspector = new PacketInspector;
			timeout = 3000;
			//timerIdleConnection = new Timer( CLIENT.TIMER_IDLE, 1 );
timerIdleConnection = new Timer( CLIENT.DELAY_IDLE, 1 );
timerIdleConnection.delay = 100;
			timerIdleConnection.addEventListener( TimerEvent.TIMER_COMPLETE, idleConnectionHappens );
			SHA256.k = SHA256.k.concat(COLOR.WIRE_LIGHT_BROWN);
		}
		
		private function configureListeners():void
		{
			addEventListener(Event.CLOSE, closeHandler);
			addEventListener(Event.CONNECT, connectHandler);
			addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
			addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
			addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);
		}
		
		public function sendGeneratedRequest( _ba:ByteArray, _func:Function ):void 
		{
			inspector.MANUAL = false;
			inspector.rememberPacketNumber(_ba);
			request = _ba;
			fResponseProcessor = _func;
			connectSocket();
		}
		public function sendManualRequest( _request:String, _func:Function ):void
		{
			inspector.MANUAL = true;
			request = new ByteArray;
			request.writeMultiByte( _request +"\r","windows-1251" );
			fResponseProcessor = _func;
			connectSocket();
		}
		public function sendGeneratedResponse( _ba:ByteArray ):void 
		{
			inspector.MANUAL = false;
			answer = _ba;
			sendOk();
		}
		public function sendOk():void
		{
			if ( answer && connected) {
				if (MISC.DEBUG_BOUT == 1) {
					DevConsole.write( "Исходящий поток, ответ по протоколу 2, длина "+answer.length +"\r"+
						UTIL.wrapHtml(UTIL.showByteArray(answer, MISC.DEBUG_BYTESINROW ), COLOR.DEVCONSOLE_BOUTOK),
						DevConsole.LIGHT );
				}
				writeBytes( answer );
				flush();
				answer = null;
			}
		}
		public function reConnect():void
		{
if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
	dtrace( "reConnect() " + getCon());
}
			if ( connected ) {
				close();
				GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onChangeOnline, {"isConnected":false} );
				GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onNeedClearQueue, null );
			}
			performConnect();
		}
		private function connectSocket():void 
		{
			if ( !this.connected )
				performConnect();
			else
				sendRequest();
		}
		public function performConnect():void 
		{
			Warning.show( loc("sys_tcp_connecting"), Warning.TYPE_ERROR, Warning.STATUS_CONNECTION );
			try {
				Security.allowDomain(CLIENT.CONNECT_IP);
				Security.loadPolicyFile( "xmlsocket://"+CLIENT.CONNECT_IP+":"+CLIENT.CONNECT_PORT);
			} catch (e:IOError) {
				//tbOutput.text += e.text;
				Warning.show( loc("sys_tcp_sandbox_violation"), Warning.TYPE_ERROR, Warning.STATUS_CONNECTION );
			}	
if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
	dtrace( "performConnect() "+CLIENT.CONNECT_IP +":"+ CLIENT.CONNECT_PORT  + getCon());
}
			
			connect( CLIENT.CONNECT_IP , CLIENT.CONNECT_PORT ); 
		}
		private function sendRequest():void 
		{
			if (!request)
				return;
			if (MISC.DEBUG_BOUT == 1) {
				var add:String="";
				if (!CLIENT.PROTOCOL_BINARY) {
					add = " ("+UTIL.showTranscodedByteArray(request)+")";
				}
				DevConsole.write( "Исходящий поток, длина "+request.length +"\r"+
					UTIL.wrapHtml(UTIL.showByteArray(request, MISC.DEBUG_BYTESINROW ) + add, COLOR.DEVCONSOLE_BOUT),
					DevConsole.LIGHT );
			}
			if (MISC.DEBUG_SHOW_PARSING) {
			
				var arr:Array = [];
				var len:int = request.length;
				request.position = 0;
				for (var i:int=0; i<len; ++i) {
					arr.push( request.readUnsignedByte() );
				}
				ParsingBot.parse(arr);
			}
			writeBytes( request );
			flush();
			if (answer)
				sendOk();
			
			timerIdleConnection.reset();
			timerIdleConnection.start();
		}
		
		private function readBinaryResponse(arr:Array):void 
		{
			ParsingBot.parse(arr.slice());
			if (fResponseProcessor is Function )
				fResponseProcessor( arr );
		}
		private function readBinary2Request(arr:Array):void 
		{
			ParsingBot.parse(arr.slice());
			ResponseDisassembler.getInst().add( arr );
		}
		private function readTextResponse():void 
		{
			if (fResponseProcessor == null) {
				dtrace("SocketProcessor:ERROR найден крашашщий запрос");
			} else {
				fResponseProcessor( [ response.readMultiByte( response.bytesAvailable, "windows-1251" ) ] );				
			}
			response.clear();
		}
		
		private function closeHandler(event:Event):void
		{
if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
	dtrace( "closeHandler() "  + getCon());
}
			shutDown();

			// Если получен сервер и токен, и был дисконект - больше не коннектиться
			if (SERVER.REMOTE_HOST == null)
				performConnect();
		}
		
		private function connectHandler(event:Event):void 
		{
			if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
				dtrace( "connect success, connectHandler().connected "  + getCon());
			}
			Warning.show( loc("sys_tcp_connect_success")+" (" +CLIENT.CONNECT_IP+":"+CLIENT.CONNECT_PORT+")", Warning.TYPE_SUCCESS, Warning.STATUS_CONNECTION );
			if ( request ) 
				sendRequest();
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onChangeOnline, {"isConnected":true} );
		}
		
		private function ioErrorHandler(event:IOErrorEvent):void 
		{
if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
	dtrace( "ioErrorHandler() "+ event.text + getCon() );
}			
		//	Warning.show( "TCP/IP: ошибка подключения", Warning.TYPE_ERROR, Warning.STATUS_CONNECTION );
			performConnect();
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onChangeOnline, {"isConnected":false} );
			if( MISC.DEBUG_SHOW_SOCKETERRORS == 1 )
				DevConsole.write( event.text, DevConsole.ERROR );
		}
		
		private function securityErrorHandler(event:SecurityErrorEvent):void 
		{
if (MISC.DEBUG_SHOW_SOCKETERRORS == 1) {
	dtrace( "securityErrorHandler() "+ event.text + getCon() );
}
		//	Warning.show( "TCP/IP: ошибка подключения", Warning.TYPE_ERROR, Warning.STATUS_CONNECTION );
			performConnect();
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onChangeOnline, {"isConnected":false} );
			if( MISC.DEBUG_SHOW_SOCKETERRORS == 1 )
				DevConsole.write( event.text, DevConsole.ERROR );
			
		}
		private function getCon():String
		{
			return " connected:"+this.connected;
		}
		private function socketDataHandler(event:ProgressEvent):void 
		{
		//	timerIdleConnectionWasRunning = timerIdleConnection.running; 
			timerIdleConnection.stop();
			if (!response)
				response = new ByteArray;
			this.readBytes( response, response.length, bytesAvailable );
			
			if (MISC.DEBUG_BIN == 1) {
				var add:String = "";
				if (!CLIENT.PROTOCOL_BINARY) {
					add = " ("+UTIL.showTranscodedByteArray(response)+")";
				}
				/*trace( "Входящий поток, длина "+response.length +"\r"+
					UTIL.wrapHtml(UTIL.showByteArray(response, MISC.DEBUG_BYTESINROW ) + add, COLOR.DEVCONSOLE_BIN)
					, DevConsole.LIGHT );*/
				DevConsole.write( "Входящий поток, длина "+response.length +"\r"+
					UTIL.wrapHtml(UTIL.showByteArray(response, MISC.DEBUG_BYTESINROW ) + add, COLOR.DEVCONSOLE_BIN)
					, DevConsole.LIGHT );
			}
			
			processStream();
		}
		private function processStream():void
		{
			var txt:String;
			var result:int = inspector.inspect( response );
			var arr:Array;
			var i:int;
			incomplete = false;
			
			if (result != PacketInspector.INCOMPLETE && result != PacketInspector.BINARY2 && result != PacketInspector.INCOMPLETE_B2)
				delay = CLIENT.DELAY_RESET;//timerIdleConnection.delay = CLIENT.DELAY_RESET;
			
			switch(result) {
				case PacketInspector.BINARY1:
					arr = [];
					for (i=0; i<inspector.LAST_INSPECTED_SIZE; ++i) {
						arr.push( response.readUnsignedByte() );
					}
					readBinaryResponse(arr);
					request = null;	 // сделал удаление реквеста при получении любого пакета бин1 вынужденно
					// иначе слепленный бин1+бин2 приводили к неудалению пакета
					if (response.bytesAvailable > 0) {	// если послед парсинга пакета еще остались байты - надо перезапустить парсинг по новой
						response = UTIL.getSpecificByteArray( response, response.position );
						processStream();
						return;
					}
					response.clear();
					// request = null;
					break;
				case PacketInspector.BINARY2:
					arr = [];
					response.position = 0;
					for (i=0; i<inspector.LAST_INSPECTED_SIZE; ++i) {
						arr.push( response.readUnsignedByte() );
					}
					readBinary2Request(arr);
					
					if (response.bytesAvailable > 0) {	// если после парсинга пакета еще остались байты - надо перезапустить парсинг по новой
						response = UTIL.getSpecificByteArray( response, response.position );
						processStream();
						return;
					}
					response.clear();
					//request = null;
					if (fIsWatingForPacket() == true)
						timerIdleConnection.start();
					break;
				case PacketInspector.TEXT:
					if(inspector.MANUAL)	{
						inspector.MANUAL = false;
						txt = response.readMultiByte( response.bytesAvailable, "windows-1251" );
						DevConsole.write( txt, DevConsole.MANUAL );
						response.clear();
					} else
						readTextResponse();
					request = null;
					break;
				case PacketInspector.INCOMPLETE:
				case PacketInspector.DISCREPANCY:
					timerIdleConnection.reset();
					timerIdleConnection.start();
				case PacketInspector.INCOMPLETE_B2:
					if (request && !timerIdleConnection.running) {
						//timerIdleConnection.reset();
						trace( UTIL.showByteArray(request) );
						timerIdleConnection.start();
						trace( "timerIdleConnection.currentCount "+ timerIdleConnection.currentCount );
						//timerIdleConnection.repeatCount
					}
					incomplete = true;
					break;
				case PacketInspector.GARBAGE:
					if(!inspector.MANUAL)	{
						if(response) {
							txt = response.readMultiByte( response.bytesAvailable, "windows-1251" );
							DevConsole.write( txt, DevConsole.GARBAGE );
							response.clear();
						}
						sendRequest();
					} else {
						inspector.MANUAL = false;
						response.clear();
					}
					break;
				case PacketInspector.IGNORE:
					response = inspector.clearUntilPreamble(response);
					if (response.length > 0) {
						response.position = 0;
						processStream();
					}
					break;
			}
		}
		private function idleConnectionHappens( ev:TimerEvent ):void
		{
			if( this.connected && !CLIENT.NOT_REQUEST_WHILE_IDLE) {
				Warning.show( DEVICES.name+" (" +SERVER.VER_FULL + ") "+loc("sys_device_not_responding_retry") , Warning.TYPE_ERROR, Warning.STATUS_DEVICE );
				if(response) {
					if (incomplete) {
						var add:String="";
						if (!CLIENT.PROTOCOL_BINARY) {
							add = " ("+UTIL.showTranscodedByteArray(response)+")";
						}
						dtrace( "ERROR: Пришел неполный пакет, таймаут истек, идет пересылка...\r"+UTIL.showByteArray(response) + add );
					}
					response.clear();
				}
				if(fResponseProcessor is Function) {
					fResponseProcessor( null );
					trace("попытка реконнекта");
					
				} else
					timerIdleConnection.stop();
				request = null;
			}
			//timerIdleConnection.delay = CLIENT.DELAY_IDLE;
			delay = CLIENT.DELAY_IDLE;
			trace("SocketProcessor.delay "+ timerIdleConnection.repeatCount*timerIdleConnection.delay);
		}
		private function set delay(value:int):void
		{
			//timerIdleConnection.delay = value;
			timerIdleConnection.repeatCount = int(value/100);
		}
		private function shutDown():void
		{
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.pageLoadLComplete, null );
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onChangeOnline, {"isConnected":false} );
			GUIEventDispatcher.getInstance().fireSystemEvent( SystemEvents.onNeedClearQueue, null );
			
			invalidDataCounter=0;
		}
		public function clear():void
		{
			request = null;
			if( response)
				response.clear();
		}
		public function disconnect():void
		{
			close();
			shutDown();
			performConnect();
		}
		public function disconnectFinal():void
		{
			close();
			shutDown();
			Warning.show( loc("sys_tcp_interrupted"), Warning.TYPE_ERROR, Warning.STATUS_CONNECTION );
		}
		public function getstats():String
		{
			var txt:String = "SocketProcessor ---------------\n"+ 
				"connected: "+this.connected + "\n"+
				"timerIdleConnection: "+timerIdleConnection.running + "\n"+
				"response: " + Boolean(response) + "\n"+
				"request: " + Boolean(request);
			return txt;
		}
		public function set progressiveRequest(value:Boolean):void
		{
			CLIENT.NO_DELAY_PROGRESSION = !value;
			//timerIdleConnection.delay = CLIENT.DELAY_IDLE;
			delay = CLIENT.DELAY_IDLE;
			if( timerIdleConnection.running ) {
				timerIdleConnection.reset();
				timerIdleConnection.start();
			}
		}
	}
}